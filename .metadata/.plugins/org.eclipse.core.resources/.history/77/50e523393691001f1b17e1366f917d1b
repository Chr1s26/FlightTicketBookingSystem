package view;

import java.awt.BorderLayout;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.List;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;

import Dao.FlightScheduleDaoImpl;
import Model.FlightSchedule;

public class ScheduleListingPage extends BaseWindow {
	
	private String[] columns = {"Id","Flight Name","Flight Number","Dept Airport","Arrival Airport","Dept Time","Arrival Time","Created At"};
	private FlightScheduleDaoImpl flightScheduleDaoImpl;
	private JButton getAvaiableSeatBtn;
	private BaseWindow parentWindow;
	private JPanel panel;
	private JButton selectButton;
	
	public ScheduleListingPage(BaseWindow parentWindow) {
		this.parentWindow = parentWindow;
		initializeSelectComponent();
	}
	
	public ScheduleListingPage() {
		
		this.flightScheduleDaoImpl = new FlightScheduleDaoImpl();
		
		this.getAvaiableSeatBtn = new JButton("Show Avaiable Seats");
		this.baseWindow.add(this.getAvaiableSeatBtn,BorderLayout.SOUTH);
		
		this.addActionAvailableSeatBtn();
			
		this.createDataTable(this.getScheduleData(), columns);
		
		
	}
	
	public void initializeSelectComponent() {
		panel = new JPanel();
		panel.setLayout(new GridLayout(1,1));
		this.flightScheduleDaoImpl = new FlightScheduleDaoImpl();
		this.createDataTable(this.getScheduleData(), columns);
		this.selectButton = new JButton("Select Schedule");
		panel.add(this.selectButton);
		this.baseWindow.add(panel,BorderLayout.SOUTH);
		this.addActionOnSelectButton();
	}
	
	public void addActionOnSelectButton() {
		this.selectButton.addActionListener(e -> selectAction());
	}
	
	public void selectAction() {
		 int selectedRowIndex = getSelectedRow();
		 if (selectedRowIndex == -1) {
			 JOptionPane.showMessageDialog(baseWindow, "Please select a customer to update.");
			 return;
		 }
		 
		 int scheduleId = getScheduleIdFromSelectedRow(selectedRowIndex);
		 selectedScheduleAndRefresh(scheduleId);
		 this.baseWindow.dispose();
	}
	
	public void selectedScheduleAndRefresh(int scheduleId) {
		FlightSchedule flightSchedule = this.flightScheduleDaoImpl.getById(scheduleId);
		TicketUpdateForm ticketUpdateForm = (TicketUpdateForm)this.parentWindow;
		ticketUpdateForm.refreshScheduleValueBtn(flightSchedule);
	}
	
	public int getScheduleIdFromSelectedRow(int rowIndex) {
		return Integer.parseInt(getScheduleData()[rowIndex][0]);
	}

	private void addActionAvailableSeatBtn() {
		this.getAvaiableSeatBtn.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				int selectedRowIndex = getDataTableTemplate().getSelectedRow();
				int scheduleId = Integer.parseInt(getScheduleData()[selectedRowIndex][0]); 
				SeatView seatView = new SeatView(scheduleId);
			}
		});
	}
	
	private int getSelectedRow() {
		return getDataTableTemplate().getSelectedRow();
	}
	
	public void call() {
		prepareBaseWindow();
	}
	
	public void prepareBaseWindow() {
		this.baseWindow.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
		this.setTitle("Schedule Page");
		this.baseWindow.setSize(800,400);
		this.baseWindow.setVisible(true);
	}
	
	private String[][] getScheduleData(){
		List<FlightSchedule> schedules = this.flightScheduleDaoImpl.getAll();
		String[][] scheduleData = new String[schedules.size()][8];
		int rowCount = 0;
		for(FlightSchedule schedule : schedules) {
			scheduleData[rowCount] = schedule.toArray();
			rowCount++;
		}
		return scheduleData;
	}
}
